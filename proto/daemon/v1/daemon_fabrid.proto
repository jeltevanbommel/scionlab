// Copyright 2024 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/scionproto/scion/pkg/proto/daemon";

package proto.daemon.v1;

import "google/protobuf/timestamp.proto";
import "proto/control_plane/experimental/v1/fabrid_extensions.proto";

message FabridInfo {
    // Enabled describes whether the hop supports Fabrid.
    bool enabled = 1;
    // Digest contains the digest for the FABRID map of this hop.
    bytes digest = 2;
    // Policies contains the fabrid policy identifiers that are supported for this hop.
    repeated FabridPolicy policies = 3;
    // Detached indicates whether the FABRID map has been detached for this hop.
    bool detached = 4;
}

message FabridPolicy {
    // The identifier for the policy, either local or global:
    proto.control_plane.experimental.v1.FABRIDPolicyIdentifier policy_identifier = 1;
    // The local index, this may differ between similar policy identifiers, as it is specific to a hop.
    uint32 policy_index = 2;
}

message FabridKeysRequest {
    // The source host
    string src_host = 1;
    // The destination AS
    uint64 dst_as = 2;
    // A list of ASes for which the AS-Host Key should be fetched
    repeated uint64 path_ases = 3;
    // The destination host. Only required if the path key should be fetched too
    optional string dst_host = 4;
}

message FabridKeyResponse {
    // Begin of validity period of DRKey.
    google.protobuf.Timestamp epoch_begin = 1;
    // End of validity period of DRKey.
    google.protobuf.Timestamp epoch_end = 2;
    // Level2 key.
    bytes key = 3;
}

message FabridKeysResponse {
    // The FABRID AS-Host DRKeys
    repeated FabridKeyResponse as_host_keys = 1;
    // The FABRID path key
    optional FabridKeyResponse host_host_key = 2;
}