// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.10
// source: proto/control_plane/experimental/v1/fabrid.proto

package experimental

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MPLSIPArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*MPLSIP `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *MPLSIPArray) Reset() {
	*x = MPLSIPArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPLSIPArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPLSIPArray) ProtoMessage() {}

func (x *MPLSIPArray) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPLSIPArray.ProtoReflect.Descriptor instead.
func (*MPLSIPArray) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{0}
}

func (x *MPLSIPArray) GetEntry() []*MPLSIP {
	if x != nil {
		return x.Entry
	}
	return nil
}

type MPLSIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsLabel uint32 `protobuf:"varint,1,opt,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty"`
	Ip        []byte `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Prefix    uint32 `protobuf:"varint,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *MPLSIP) Reset() {
	*x = MPLSIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPLSIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPLSIP) ProtoMessage() {}

func (x *MPLSIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPLSIP.ProtoReflect.Descriptor instead.
func (*MPLSIP) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{1}
}

func (x *MPLSIP) GetMplsLabel() uint32 {
	if x != nil {
		return x.MplsLabel
	}
	return 0
}

func (x *MPLSIP) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *MPLSIP) GetPrefix() uint32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

type MPLSMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *MPLSMapRequest) Reset() {
	*x = MPLSMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPLSMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPLSMapRequest) ProtoMessage() {}

func (x *MPLSMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPLSMapRequest.ProtoReflect.Descriptor instead.
func (*MPLSMapRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{2}
}

func (x *MPLSMapRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type MPLSMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update                   bool                    `protobuf:"varint,1,opt,name=update,proto3" json:"update,omitempty"`
	Hash                     []byte                  `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	MplsInterfacePoliciesMap map[uint64]uint32       `protobuf:"bytes,3,rep,name=mplsInterfacePoliciesMap,proto3" json:"mplsInterfacePoliciesMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MplsIPMap                map[uint32]*MPLSIPArray `protobuf:"bytes,4,rep,name=mplsIPMap,proto3" json:"mplsIPMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MPLSMapResponse) Reset() {
	*x = MPLSMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MPLSMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MPLSMapResponse) ProtoMessage() {}

func (x *MPLSMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MPLSMapResponse.ProtoReflect.Descriptor instead.
func (*MPLSMapResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{3}
}

func (x *MPLSMapResponse) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *MPLSMapResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MPLSMapResponse) GetMplsInterfacePoliciesMap() map[uint64]uint32 {
	if x != nil {
		return x.MplsInterfacePoliciesMap
	}
	return nil
}

func (x *MPLSMapResponse) GetMplsIPMap() map[uint32]*MPLSIPArray {
	if x != nil {
		return x.MplsIPMap
	}
	return nil
}

type SupportedIndicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupportedIndicesRequest) Reset() {
	*x = SupportedIndicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedIndicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedIndicesRequest) ProtoMessage() {}

func (x *SupportedIndicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedIndicesRequest.ProtoReflect.Descriptor instead.
func (*SupportedIndicesRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{4}
}

type SupportedIndicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedIndicesMap []*FABRIDIndexMapEntry `protobuf:"bytes,1,rep,name=supported_indices_map,json=supportedIndicesMap,proto3" json:"supported_indices_map,omitempty"`
}

func (x *SupportedIndicesResponse) Reset() {
	*x = SupportedIndicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedIndicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedIndicesResponse) ProtoMessage() {}

func (x *SupportedIndicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedIndicesResponse.ProtoReflect.Descriptor instead.
func (*SupportedIndicesResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{5}
}

func (x *SupportedIndicesResponse) GetSupportedIndicesMap() []*FABRIDIndexMapEntry {
	if x != nil {
		return x.SupportedIndicesMap
	}
	return nil
}

type IndexIdentifierMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexIdentifierMapRequest) Reset() {
	*x = IndexIdentifierMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexIdentifierMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexIdentifierMapRequest) ProtoMessage() {}

func (x *IndexIdentifierMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexIdentifierMapRequest.ProtoReflect.Descriptor instead.
func (*IndexIdentifierMapRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{6}
}

type IndexIdentifierMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexIdentifierMap map[uint32]*FABRIDPolicyIdentifier `protobuf:"bytes,1,rep,name=index_identifier_map,json=indexIdentifierMap,proto3" json:"index_identifier_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IndexIdentifierMapResponse) Reset() {
	*x = IndexIdentifierMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexIdentifierMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexIdentifierMapResponse) ProtoMessage() {}

func (x *IndexIdentifierMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexIdentifierMapResponse.ProtoReflect.Descriptor instead.
func (*IndexIdentifierMapResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{7}
}

func (x *IndexIdentifierMapResponse) GetIndexIdentifierMap() map[uint32]*FABRIDPolicyIdentifier {
	if x != nil {
		return x.IndexIdentifierMap
	}
	return nil
}

type RemotePolicyDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyIdentifier uint32 `protobuf:"varint,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
	IsdAs            uint64 `protobuf:"varint,2,opt,name=isd_as,json=isdAs,proto3" json:"isd_as,omitempty"`
}

func (x *RemotePolicyDescriptionRequest) Reset() {
	*x = RemotePolicyDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemotePolicyDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemotePolicyDescriptionRequest) ProtoMessage() {}

func (x *RemotePolicyDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemotePolicyDescriptionRequest.ProtoReflect.Descriptor instead.
func (*RemotePolicyDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{8}
}

func (x *RemotePolicyDescriptionRequest) GetPolicyIdentifier() uint32 {
	if x != nil {
		return x.PolicyIdentifier
	}
	return 0
}

func (x *RemotePolicyDescriptionRequest) GetIsdAs() uint64 {
	if x != nil {
		return x.IsdAs
	}
	return 0
}

type PolicyDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyIdentifier uint32 `protobuf:"varint,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
}

func (x *PolicyDescriptionRequest) Reset() {
	*x = PolicyDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDescriptionRequest) ProtoMessage() {}

func (x *PolicyDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDescriptionRequest.ProtoReflect.Descriptor instead.
func (*PolicyDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{9}
}

func (x *PolicyDescriptionRequest) GetPolicyIdentifier() uint32 {
	if x != nil {
		return x.PolicyIdentifier
	}
	return 0
}

type PolicyDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PolicyDescriptionResponse) Reset() {
	*x = PolicyDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDescriptionResponse) ProtoMessage() {}

func (x *PolicyDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDescriptionResponse.ProtoReflect.Descriptor instead.
func (*PolicyDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP(), []int{10}
}

func (x *PolicyDescriptionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_proto_control_plane_experimental_v1_fabrid_proto protoreflect.FileDescriptor

var file_proto_control_plane_experimental_v1_fabrid_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0b, 0x4d, 0x50, 0x4c, 0x53, 0x49, 0x50, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x4c, 0x53, 0x49, 0x50, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4f, 0x0a, 0x06, 0x4d, 0x50, 0x4c, 0x53, 0x49, 0x50,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x24, 0x0a, 0x0e, 0x4d, 0x50, 0x4c, 0x53, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xee, 0x03,
	0x0a, 0x0f, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x8e, 0x01,
	0x0a, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x6d, 0x70, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x61,
	0x0a, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x49, 0x50, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x49, 0x50, 0x4d, 0x61,
	0x70, 0x1a, 0x4b, 0x0a, 0x1d, 0x4d, 0x70, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6e,
	0x0a, 0x0e, 0x4d, 0x70, 0x6c, 0x73, 0x49, 0x50, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x4c, 0x53, 0x49, 0x50, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19,
	0x0a, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x41, 0x42, 0x52,
	0x49, 0x44, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xad, 0x02, 0x0a, 0x1a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x89, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a, 0x82, 0x01, 0x0a,
	0x17, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x44, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x64, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x69, 0x73, 0x64, 0x41, 0x73, 0x22, 0x47, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x3d, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xea, 0x03, 0x0a, 0x12, 0x46, 0x41, 0x42, 0x52, 0x49, 0x44, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc1, 0x02, 0x0a,
	0x12, 0x46, 0x41, 0x42, 0x52, 0x49, 0x44, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x61, 0x70, 0x49, 0x66, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x50, 0x4c, 0x53, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x50, 0x4c, 0x53, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x63, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_control_plane_experimental_v1_fabrid_proto_rawDescOnce sync.Once
	file_proto_control_plane_experimental_v1_fabrid_proto_rawDescData = file_proto_control_plane_experimental_v1_fabrid_proto_rawDesc
)

func file_proto_control_plane_experimental_v1_fabrid_proto_rawDescGZIP() []byte {
	file_proto_control_plane_experimental_v1_fabrid_proto_rawDescOnce.Do(func() {
		file_proto_control_plane_experimental_v1_fabrid_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_control_plane_experimental_v1_fabrid_proto_rawDescData)
	})
	return file_proto_control_plane_experimental_v1_fabrid_proto_rawDescData
}

var file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_control_plane_experimental_v1_fabrid_proto_goTypes = []interface{}{
	(*MPLSIPArray)(nil),                    // 0: proto.control_plane.experimental.v1.MPLSIPArray
	(*MPLSIP)(nil),                         // 1: proto.control_plane.experimental.v1.MPLSIP
	(*MPLSMapRequest)(nil),                 // 2: proto.control_plane.experimental.v1.MPLSMapRequest
	(*MPLSMapResponse)(nil),                // 3: proto.control_plane.experimental.v1.MPLSMapResponse
	(*SupportedIndicesRequest)(nil),        // 4: proto.control_plane.experimental.v1.SupportedIndicesRequest
	(*SupportedIndicesResponse)(nil),       // 5: proto.control_plane.experimental.v1.SupportedIndicesResponse
	(*IndexIdentifierMapRequest)(nil),      // 6: proto.control_plane.experimental.v1.IndexIdentifierMapRequest
	(*IndexIdentifierMapResponse)(nil),     // 7: proto.control_plane.experimental.v1.IndexIdentifierMapResponse
	(*RemotePolicyDescriptionRequest)(nil), // 8: proto.control_plane.experimental.v1.RemotePolicyDescriptionRequest
	(*PolicyDescriptionRequest)(nil),       // 9: proto.control_plane.experimental.v1.PolicyDescriptionRequest
	(*PolicyDescriptionResponse)(nil),      // 10: proto.control_plane.experimental.v1.PolicyDescriptionResponse
	nil,                                    // 11: proto.control_plane.experimental.v1.MPLSMapResponse.MplsInterfacePoliciesMapEntry
	nil,                                    // 12: proto.control_plane.experimental.v1.MPLSMapResponse.MplsIPMapEntry
	nil,                                    // 13: proto.control_plane.experimental.v1.IndexIdentifierMapResponse.IndexIdentifierMapEntry
	(*FABRIDIndexMapEntry)(nil),            // 14: proto.control_plane.experimental.v1.FABRIDIndexMapEntry
	(*FABRIDPolicyIdentifier)(nil),         // 15: proto.control_plane.experimental.v1.FABRIDPolicyIdentifier
}
var file_proto_control_plane_experimental_v1_fabrid_proto_depIdxs = []int32{
	1,  // 0: proto.control_plane.experimental.v1.MPLSIPArray.entry:type_name -> proto.control_plane.experimental.v1.MPLSIP
	11, // 1: proto.control_plane.experimental.v1.MPLSMapResponse.mplsInterfacePoliciesMap:type_name -> proto.control_plane.experimental.v1.MPLSMapResponse.MplsInterfacePoliciesMapEntry
	12, // 2: proto.control_plane.experimental.v1.MPLSMapResponse.mplsIPMap:type_name -> proto.control_plane.experimental.v1.MPLSMapResponse.MplsIPMapEntry
	14, // 3: proto.control_plane.experimental.v1.SupportedIndicesResponse.supported_indices_map:type_name -> proto.control_plane.experimental.v1.FABRIDIndexMapEntry
	13, // 4: proto.control_plane.experimental.v1.IndexIdentifierMapResponse.index_identifier_map:type_name -> proto.control_plane.experimental.v1.IndexIdentifierMapResponse.IndexIdentifierMapEntry
	0,  // 5: proto.control_plane.experimental.v1.MPLSMapResponse.MplsIPMapEntry.value:type_name -> proto.control_plane.experimental.v1.MPLSIPArray
	15, // 6: proto.control_plane.experimental.v1.IndexIdentifierMapResponse.IndexIdentifierMapEntry.value:type_name -> proto.control_plane.experimental.v1.FABRIDPolicyIdentifier
	4,  // 7: proto.control_plane.experimental.v1.FABRIDInterService.GetSupportedIndicesMap:input_type -> proto.control_plane.experimental.v1.SupportedIndicesRequest
	6,  // 8: proto.control_plane.experimental.v1.FABRIDInterService.GetIndexIdentifierMap:input_type -> proto.control_plane.experimental.v1.IndexIdentifierMapRequest
	9,  // 9: proto.control_plane.experimental.v1.FABRIDInterService.GetLocalPolicyDescription:input_type -> proto.control_plane.experimental.v1.PolicyDescriptionRequest
	8,  // 10: proto.control_plane.experimental.v1.FABRIDIntraService.GetRemotePolicyDescription:input_type -> proto.control_plane.experimental.v1.RemotePolicyDescriptionRequest
	2,  // 11: proto.control_plane.experimental.v1.FABRIDIntraService.GetMPLSMapIfNecessary:input_type -> proto.control_plane.experimental.v1.MPLSMapRequest
	5,  // 12: proto.control_plane.experimental.v1.FABRIDInterService.GetSupportedIndicesMap:output_type -> proto.control_plane.experimental.v1.SupportedIndicesResponse
	7,  // 13: proto.control_plane.experimental.v1.FABRIDInterService.GetIndexIdentifierMap:output_type -> proto.control_plane.experimental.v1.IndexIdentifierMapResponse
	10, // 14: proto.control_plane.experimental.v1.FABRIDInterService.GetLocalPolicyDescription:output_type -> proto.control_plane.experimental.v1.PolicyDescriptionResponse
	10, // 15: proto.control_plane.experimental.v1.FABRIDIntraService.GetRemotePolicyDescription:output_type -> proto.control_plane.experimental.v1.PolicyDescriptionResponse
	3,  // 16: proto.control_plane.experimental.v1.FABRIDIntraService.GetMPLSMapIfNecessary:output_type -> proto.control_plane.experimental.v1.MPLSMapResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_control_plane_experimental_v1_fabrid_proto_init() }
func file_proto_control_plane_experimental_v1_fabrid_proto_init() {
	if File_proto_control_plane_experimental_v1_fabrid_proto != nil {
		return
	}
	file_proto_control_plane_experimental_v1_fabrid_extensions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPLSIPArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPLSIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPLSMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MPLSMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedIndicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedIndicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexIdentifierMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexIdentifierMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemotePolicyDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_control_plane_experimental_v1_fabrid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_control_plane_experimental_v1_fabrid_proto_goTypes,
		DependencyIndexes: file_proto_control_plane_experimental_v1_fabrid_proto_depIdxs,
		MessageInfos:      file_proto_control_plane_experimental_v1_fabrid_proto_msgTypes,
	}.Build()
	File_proto_control_plane_experimental_v1_fabrid_proto = out.File
	file_proto_control_plane_experimental_v1_fabrid_proto_rawDesc = nil
	file_proto_control_plane_experimental_v1_fabrid_proto_goTypes = nil
	file_proto_control_plane_experimental_v1_fabrid_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FABRIDInterServiceClient is the client API for FABRIDInterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FABRIDInterServiceClient interface {
	GetSupportedIndicesMap(ctx context.Context, in *SupportedIndicesRequest, opts ...grpc.CallOption) (*SupportedIndicesResponse, error)
	GetIndexIdentifierMap(ctx context.Context, in *IndexIdentifierMapRequest, opts ...grpc.CallOption) (*IndexIdentifierMapResponse, error)
	GetLocalPolicyDescription(ctx context.Context, in *PolicyDescriptionRequest, opts ...grpc.CallOption) (*PolicyDescriptionResponse, error)
}

type fABRIDInterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFABRIDInterServiceClient(cc grpc.ClientConnInterface) FABRIDInterServiceClient {
	return &fABRIDInterServiceClient{cc}
}

func (c *fABRIDInterServiceClient) GetSupportedIndicesMap(ctx context.Context, in *SupportedIndicesRequest, opts ...grpc.CallOption) (*SupportedIndicesResponse, error) {
	out := new(SupportedIndicesResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.experimental.v1.FABRIDInterService/GetSupportedIndicesMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fABRIDInterServiceClient) GetIndexIdentifierMap(ctx context.Context, in *IndexIdentifierMapRequest, opts ...grpc.CallOption) (*IndexIdentifierMapResponse, error) {
	out := new(IndexIdentifierMapResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.experimental.v1.FABRIDInterService/GetIndexIdentifierMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fABRIDInterServiceClient) GetLocalPolicyDescription(ctx context.Context, in *PolicyDescriptionRequest, opts ...grpc.CallOption) (*PolicyDescriptionResponse, error) {
	out := new(PolicyDescriptionResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.experimental.v1.FABRIDInterService/GetLocalPolicyDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FABRIDInterServiceServer is the server API for FABRIDInterService service.
type FABRIDInterServiceServer interface {
	GetSupportedIndicesMap(context.Context, *SupportedIndicesRequest) (*SupportedIndicesResponse, error)
	GetIndexIdentifierMap(context.Context, *IndexIdentifierMapRequest) (*IndexIdentifierMapResponse, error)
	GetLocalPolicyDescription(context.Context, *PolicyDescriptionRequest) (*PolicyDescriptionResponse, error)
}

// UnimplementedFABRIDInterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFABRIDInterServiceServer struct {
}

func (*UnimplementedFABRIDInterServiceServer) GetSupportedIndicesMap(context.Context, *SupportedIndicesRequest) (*SupportedIndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedIndicesMap not implemented")
}
func (*UnimplementedFABRIDInterServiceServer) GetIndexIdentifierMap(context.Context, *IndexIdentifierMapRequest) (*IndexIdentifierMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexIdentifierMap not implemented")
}
func (*UnimplementedFABRIDInterServiceServer) GetLocalPolicyDescription(context.Context, *PolicyDescriptionRequest) (*PolicyDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalPolicyDescription not implemented")
}

func RegisterFABRIDInterServiceServer(s *grpc.Server, srv FABRIDInterServiceServer) {
	s.RegisterService(&_FABRIDInterService_serviceDesc, srv)
}

func _FABRIDInterService_GetSupportedIndicesMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedIndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FABRIDInterServiceServer).GetSupportedIndicesMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.experimental.v1.FABRIDInterService/GetSupportedIndicesMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FABRIDInterServiceServer).GetSupportedIndicesMap(ctx, req.(*SupportedIndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FABRIDInterService_GetIndexIdentifierMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexIdentifierMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FABRIDInterServiceServer).GetIndexIdentifierMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.experimental.v1.FABRIDInterService/GetIndexIdentifierMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FABRIDInterServiceServer).GetIndexIdentifierMap(ctx, req.(*IndexIdentifierMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FABRIDInterService_GetLocalPolicyDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FABRIDInterServiceServer).GetLocalPolicyDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.experimental.v1.FABRIDInterService/GetLocalPolicyDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FABRIDInterServiceServer).GetLocalPolicyDescription(ctx, req.(*PolicyDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FABRIDInterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.experimental.v1.FABRIDInterService",
	HandlerType: (*FABRIDInterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedIndicesMap",
			Handler:    _FABRIDInterService_GetSupportedIndicesMap_Handler,
		},
		{
			MethodName: "GetIndexIdentifierMap",
			Handler:    _FABRIDInterService_GetIndexIdentifierMap_Handler,
		},
		{
			MethodName: "GetLocalPolicyDescription",
			Handler:    _FABRIDInterService_GetLocalPolicyDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/experimental/v1/fabrid.proto",
}

// FABRIDIntraServiceClient is the client API for FABRIDIntraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FABRIDIntraServiceClient interface {
	GetRemotePolicyDescription(ctx context.Context, in *RemotePolicyDescriptionRequest, opts ...grpc.CallOption) (*PolicyDescriptionResponse, error)
	GetMPLSMapIfNecessary(ctx context.Context, in *MPLSMapRequest, opts ...grpc.CallOption) (*MPLSMapResponse, error)
}

type fABRIDIntraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFABRIDIntraServiceClient(cc grpc.ClientConnInterface) FABRIDIntraServiceClient {
	return &fABRIDIntraServiceClient{cc}
}

func (c *fABRIDIntraServiceClient) GetRemotePolicyDescription(ctx context.Context, in *RemotePolicyDescriptionRequest, opts ...grpc.CallOption) (*PolicyDescriptionResponse, error) {
	out := new(PolicyDescriptionResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.experimental.v1.FABRIDIntraService/GetRemotePolicyDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fABRIDIntraServiceClient) GetMPLSMapIfNecessary(ctx context.Context, in *MPLSMapRequest, opts ...grpc.CallOption) (*MPLSMapResponse, error) {
	out := new(MPLSMapResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.experimental.v1.FABRIDIntraService/GetMPLSMapIfNecessary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FABRIDIntraServiceServer is the server API for FABRIDIntraService service.
type FABRIDIntraServiceServer interface {
	GetRemotePolicyDescription(context.Context, *RemotePolicyDescriptionRequest) (*PolicyDescriptionResponse, error)
	GetMPLSMapIfNecessary(context.Context, *MPLSMapRequest) (*MPLSMapResponse, error)
}

// UnimplementedFABRIDIntraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFABRIDIntraServiceServer struct {
}

func (*UnimplementedFABRIDIntraServiceServer) GetRemotePolicyDescription(context.Context, *RemotePolicyDescriptionRequest) (*PolicyDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemotePolicyDescription not implemented")
}
func (*UnimplementedFABRIDIntraServiceServer) GetMPLSMapIfNecessary(context.Context, *MPLSMapRequest) (*MPLSMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMPLSMapIfNecessary not implemented")
}

func RegisterFABRIDIntraServiceServer(s *grpc.Server, srv FABRIDIntraServiceServer) {
	s.RegisterService(&_FABRIDIntraService_serviceDesc, srv)
}

func _FABRIDIntraService_GetRemotePolicyDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemotePolicyDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FABRIDIntraServiceServer).GetRemotePolicyDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.experimental.v1.FABRIDIntraService/GetRemotePolicyDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FABRIDIntraServiceServer).GetRemotePolicyDescription(ctx, req.(*RemotePolicyDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FABRIDIntraService_GetMPLSMapIfNecessary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MPLSMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FABRIDIntraServiceServer).GetMPLSMapIfNecessary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.experimental.v1.FABRIDIntraService/GetMPLSMapIfNecessary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FABRIDIntraServiceServer).GetMPLSMapIfNecessary(ctx, req.(*MPLSMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FABRIDIntraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.experimental.v1.FABRIDIntraService",
	HandlerType: (*FABRIDIntraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemotePolicyDescription",
			Handler:    _FABRIDIntraService_GetRemotePolicyDescription_Handler,
		},
		{
			MethodName: "GetMPLSMapIfNecessary",
			Handler:    _FABRIDIntraService_GetMPLSMapIfNecessary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/experimental/v1/fabrid.proto",
}
